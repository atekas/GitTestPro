package com.sensu.android.zimaogou.external.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sensu.android.zimaogou.external.greendao.model.AddressDefault;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ADDRESS_DEFAULT.
*/
public class AddressDefaultDao extends AbstractDao<AddressDefault, Void> {

    public static final String TABLENAME = "ADDRESS_DEFAULT";

    /**
     * Properties of entity AddressDefault.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "MOBILE");
        public final static Property Id_card = new Property(3, String.class, "id_card", false, "ID_CARD");
        public final static Property Province_id = new Property(4, String.class, "province_id", false, "PROVINCE_ID");
        public final static Property City_id = new Property(5, String.class, "city_id", false, "CITY_ID");
        public final static Property District_id = new Property(6, String.class, "district_id", false, "DISTRICT_ID");
        public final static Property Province = new Property(7, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(8, String.class, "city", false, "CITY");
        public final static Property District = new Property(9, String.class, "district", false, "DISTRICT");
        public final static Property Address = new Property(10, String.class, "address", false, "ADDRESS");
        public final static Property Is_default = new Property(11, String.class, "is_default", false, "IS_DEFAULT");
    };


    public AddressDefaultDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDefaultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADDRESS_DEFAULT' (" + //
                "'ID' TEXT," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'MOBILE' TEXT," + // 2: mobile
                "'ID_CARD' TEXT," + // 3: id_card
                "'PROVINCE_ID' TEXT," + // 4: province_id
                "'CITY_ID' TEXT," + // 5: city_id
                "'DISTRICT_ID' TEXT," + // 6: district_id
                "'PROVINCE' TEXT," + // 7: province
                "'CITY' TEXT," + // 8: city
                "'DISTRICT' TEXT," + // 9: district
                "'ADDRESS' TEXT," + // 10: address
                "'IS_DEFAULT' TEXT);"); // 11: is_default
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADDRESS_DEFAULT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AddressDefault entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String id_card = entity.getId_card();
        if (id_card != null) {
            stmt.bindString(4, id_card);
        }
 
        String province_id = entity.getProvince_id();
        if (province_id != null) {
            stmt.bindString(5, province_id);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(6, city_id);
        }
 
        String district_id = entity.getDistrict_id();
        if (district_id != null) {
            stmt.bindString(7, district_id);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(8, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(10, district);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String is_default = entity.getIs_default();
        if (is_default != null) {
            stmt.bindString(12, is_default);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AddressDefault readEntity(Cursor cursor, int offset) {
        AddressDefault entity = new AddressDefault( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id_card
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // province_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // district_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // province
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // district
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // is_default
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AddressDefault entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId_card(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProvince_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDistrict_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProvince(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDistrict(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_default(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AddressDefault entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AddressDefault entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
